----- 방카 사용 설명서 API - 3

작성일 : 2013.06.24

작성자 : FEP뱅킹 강 석부장

제공 API : IB_Vela.2.130624.jar



To : 개발매니져 : 안광직(010-4167-8459)


FEP 프로그램을 전반적으로 수정을 하게 되어서 버전 2로 제작하게 되었습니다.

이번 프로그램은 여러 개발자를 위해서 개발자들도 PC에 WAS를 설치하여

설치된 WAS 시스템에서 FEP 를 이용할 수 있도록 구성하였습니다.

그래서 요구되는 것이 각 개발자등로 전문번호를 개별적으로 관리가 필요하게

되었습니다. 또한 불필요하게 사용되었던 FEPID 인자를 제거하고 그에 해당하는

값을 전문의 HDR_TRX_ID 의 9바이트 내에 두게 되었습니다.

추후에 대외기관과의 접속은 이 FEPID를 갖고 처리하도록 될 것입니다.

그럼 순서적으로 알아보겠습니다.

여러 개발자들이 사용하기 위해서는 이 시스템이 사용하고 있는 폴더형태를

각 PC의 특정 폴더에 구성하여야 합니다. 전 임의적으로 server라는 폴더를 

선택하였습니다. 이 server 폴더는 어떠한 위치에 자리를 하여도 상관이 없고

단지 그에 대한 구성과 그 폴더의 위치를 실행되는 WAS서버에 알려주기만

하면 됩니다. server 아래의 폴더 구조는 다음과 같습니다.


	server
		ap
			cfg
				ap.properties
			log
		ext
			cfg
				ext.properties
			log
		fep
			cfg
				fep.properties
			log
		ib
			cfg
				ib.properties
			log


여기에서는 확장자가 properties 라 붙어있는 파일은 각 실행되는 프로세스의

환경정보가 있는 파일이다. 이 파일은 특별한 사정이 없는한 고정되어 있다.

각 PC에서 개발하는 개발자는 ib.properties 파일만 있으면 된다. 나머지

properties 파일은 각 서버에서 사용하는 파일들이다.

관련 개발자가 아니면 수정하지 않기를 바랍니다.

그리고 나머지 항목들은 모두 폴더이다. 여기에서는 log라는 폴더가 있는데

이 폴더에는 관련된 프로세스가 실행되면서 남기는 로그를 볼 수 있다.

여기 쌓이는 로그 파일의 형태는 YYYYMMDD.log 형태이다. 해당날짜에 쌓이는

로그 파일이 된다. 물론 해당위치에서 로그파일을 보려면 tail 프로그램을 

이용하면 된다.


	tail -f YYYYMMDD.log


환경정보에 대해서는 WAS시스템을 실행할 때 아래와 같은 내용을 추가해야

한다. 이 부분이 정의되어 있지 않으면 iBridge(FEP 프로그램명) 프로그램이

실행할 수 없게 된다. 관련된 내용은 WAS 서버(172.30.222.9)에서 받아가기

바랍니다.


	-Dsystem.ib.param.basefolder=[server 폴더의 절대 PATH]/server/
	
	예) -Dsystem.ib.param.basefolder=D:/KANG/WORK/workspace/server/


또한 명심해야 할 것은 server 뒤에 '/'는 반드시 붙여야 한다. 현재 체크

하는 기능이 없어서 나중에 수정후에는 상관 없지만...

지금과 같이 설정이 완료되면 소스 프로그램은 다음과 같다. 관련 프로그램

일부를 추출하여 리스트 합니다. 아래 소스는 버젼2 에서 테스트 했던

소스입니다. 처리내용을 간단히 설명하면 10개의 요청전문을 동시에 보내고

처리된 응답전문은 비동기로 루핑을 돌면서 받는다.


	private static void test05() 
	{
		boolean flag = true;
		
		if (flag) {
			try {
				/*
				 * 버전 2에서는 멀티유저와 멀티대외기관 처리를 위해
				 * 설계를 변경하여 만들었습니다.
				 * 
				 * 멀티대외기관은 지금 작업중에 있고,
				 * 멀티유저를 위해서는 개발자PC의 WAS서버에 제공하는
				 * 패키지를 설치하시고 아래와 같이 대상 폴더와 프라퍼티
				 * 파일을 구성하여 준비하시면 개발하신 프로그램을 실행
				 * 하면 됩니다.
				 * 
				 *     server
				 *         ap
				 *             cfg
				 *                 ap.properties
				 *             log
				 *         ext
				 *             cfg
				 *                 ext.properties
				 *             log
				 *         fep
				 *             cfg
				 *                 fep.properties
				 *             log
				 *         ib
				 *             cfg
				 *                 ib.properties
				 *             log
				 * 
				 * 위에 구성하신 정보를 FEP프로그램에서 인식하기 위해서는
				 * 아래와 같은 property 를 WAS 프로그램 실행에 추가하셔야
				 * 합니다.
				 * 
				 *     -Dsystem.ib.param.basefolder=...../server/
				 *   
				 * server 뒤에는 '/'를 반드시 붙여야 합니다. 그리고 로그는
				 * ...../server/ib/log/YYYYMMDD.log 파일로 되어 있습니다.
				 * 
				 */
				
				/*
				 * 송수신 처리를 하는 객체를 생성한다.
				 * 이 객체는 송신과 수신을 async 방식으로
				 * 처리한다.
				 */
				IBridgeServant servant = new IBridgeServant();

				/*
				 * 패키지의 version을 확인한다.
				 * 멀티처리를 위한 로직을 추가한 version은 2 이다.
				 */
				System.out.println("Version : " + servant.getVersion());
				
				// int waitTime = 2;
				int loopCount = 10;

				/*
				 *  여러건을 한꺼번에 송신한다.
				 *  쉬지않과 loopCount 만큼 송신만 한다.
				 *  비동기 방식 처리 테스트임
				 */
				for (int i=0; i < loopCount; i++) {

					/*
					 *  요청송신전문을 생성한다. 아래 요청전문은 테스트를 위한 것이고
					 *  개발자들은 사용하지 말아주세요.
					 *  개발자는 직접 보험사에서 사용하는 XML 전문을 사용하기 바람.
					 */
					String strReqSoapXml = Sample01Xml.getReqXml();
					
					/*
					 *  요청전문을 보낸다.
					 *  FEPID는 전문에 포함된다.
					 *  전문의 HDR_TRX_ID (9 bytes)에 있으면 된다. 아래 처럼 사용바람.
					 *  
					 *  <HDR_TRX_ID>HWI01</HDR_TRX_ID>
					 *  
					 */
					servant.sendXml(strReqSoapXml);
					if (flag) System.out.println("REQ["+ i +"] : " + strReqSoapXml);
					
					/*
					 *  wait for some seconds.
					 */
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {}
				}

				System.out.println("-------------------------------------------------------");
				System.out.println("-------------------------------------------------------");
				System.out.println("-------------------------------------------------------");
				System.out.println("-------------------------------------------------------");
				System.out.println("-------------------------------------------------------");
				
				/*
				 * 여러건을 한꺼번에 수신한다.
				 * recv n times
				 */
				for (int i=1; i < 100000; i++) {
					/*
					 * 응답전문을 받을 준비를 한다.
					 * 
					 * 응답수신전문을 수신한다. 기다리면서
					 * recvXml(BLOCKTIME)
					 *         BLOCKTIME 은 응답전문을 기다리는 최대시간, 받은 즉시 return 된다.
					 *         만일 BLOCKTIME 이 0 이면 응답전문을 무한정 기다린다. (sync 에 적용)
					 *         async 에 적용하려면 BLOCKTIME 을 특정시간(millisecond) 으로 관리하면
					 *         된다.
					 */
					
					/*
					 *  receiveing XML : waiting data for max 2 seconds
					 *  아래 소스는 최대 2초간 기다린다.
					 *  기다리는 사이에 응답전문을 받으면 곧바로 리턴한다.
					 */
					String strResSoapXml = servant.recvXml(2000);

					if (strResSoapXml != null) {
						/*
						 *  receive the response message from the server, and not null
						 *  받은 응답전문을 화면에 출력한다.
						 */
						if (flag) System.out.println("\nRES[" + i + "]: " + strResSoapXml);
					}
					else {
						/*
						 * 비동기임을 확인하기 위한 # 출력임.
						 */
						if (flag) System.out.print("#");
					}
					
					/*
					 *  wait for some seconds.  loop wait time
					 *  받은 후 처리시간을 가정한 loop wait time 이다.
					 *  이 항목은 이해하지 않아도 된다.
					 */
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {}
				}
				
				/*
				 * 위에서 테스트한 결과로 송신과 수신은 async 방식으로 진행되며
				 * 연속송신하는 가운데 수신처리를 삽입할 수 있으며 그 반대의 경우도
				 * 가능하다.
				 * 소스에 궁금하신 점이 있으시면 아래로 연락하세요.
				 *                  개발자 : 강석부장 (010-4258-2025)
				 * 감사합니다.
				 */
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}
	

위 소스에서 버젼1과 다른점은 불필요했던 FEPID를 전문의 HDR_TRX_ID 테그에 넣은 것이다.

어떻게 해서든지 송수신 전문에 대한 기관구분을 하려면 프로그램에서 처리하는 것 보다는

전문에 포함하여 대외기관에 보내고 응답결과를 FEPID가 포함된 전문으로 받는 것으로

하다보니 FEPID는 전문 HDR_TRX_ID 에 포함하지 않으면 안되게 되었습니다.

그래서 소스에서 기존 method를 변경하시기 바랍니다. 반드시 FEPID는 요청전문

HDR_TRX_ID 테그에 처리를 하셔야 합니다. 그리고 FEP 시스템에서 전문번호를 관리

하는데에도 이 FEPID를 이용하고 있습니다. 아래에는 그 예를 보여줍니다.


	<HDR_TRX_ID>HWI01</HDR_TRX_ID>


그리고 여러 개발자 PC에서도 FEP 시스템을 이용하도록 하다보니 전문번호를 관리하지

않은 수 없어서 그에 대한 방법을 알려드립니다.

1차적으로 HDR_TRX_ID 에 FEPID를 정의하고, 다음으로 HDR_BAK_DOCSEQ 테그에

8 바이트의 숫자를 정의하는 방법으로 하는 것이 좋을까 합니다. 각 개발자에게

번호를 할당하고 그 번호대에만 SEQ 관리하는 것입니다. 예를들어 한 개발자가

07을 할당하고 SEQ가 1243(이번호는 이 개발자만의 순번)이면 HDR_BAK_DOCSEQ는

아래와 같이 사용하시면 됩니다.


	<HDR_BAK_DOCSEQ>07001243</HDR_BAK_DOCSEQ>


이렇게 정의하면 한 전문에 대해서 순수하게 사용되는 key는 HWI0107001243 으로 정의하게

됩니다.


이상으로 개발자들이 각 PC에서 개발이 가능하도록 구성하여 설정하였습니다.

궁금하신 점이 있으시면 연락주세요.

